{"version":3,"sources":["types.ts","constants.ts","state/reducer.ts","state/state.tsx","components/FormField.tsx","AddPatientModal/AddPatientForm.tsx","AddPatientModal/index.tsx","components/HealthRatingBar.tsx","PatientListPage/index.tsx","PatientPage/helper.ts","PatientPage/Hospital.tsx","PatientPage/HealthCheck.tsx","PatientPage/OccupationalHealth.tsx","PatientPage/Entry.tsx","AddEntryModal/AddEntryForm.tsx","AddEntryModal/index.tsx","PatientPage/index.tsx","App.tsx","index.tsx"],"names":["Gender","EntryType","HealthCheckRating","apiBaseUrl","setPatient","patient","type","payload","initialState","patients","diagnoses","StateContext","createContext","StateProvider","reducer","children","useReducer","state","dispatch","Provider","value","useStateValue","useContext","SelectField","name","label","options","Form","Field","as","className","map","option","TextField","field","placeholder","style","color","NumberField","min","max","DiagnosisSelection","setFieldValue","setFieldTouched","stateOptions","diagnosis","key","code","text","Dropdown","fluid","multiple","search","selection","onChange","_event","data","genderOptions","Male","Female","Other","AddPatientForm","onSubmit","onCancel","initialValues","ssn","dateOfBirth","occupation","gender","validate","values","requiredError","errors","isValid","dirty","component","Grid","Column","floated","width","Button","onClick","disabled","AddPatientModal","modalOpen","onClose","error","Modal","open","centered","closeIcon","Header","Content","Segment","inverted","HEALTHBAR_TEXTS","HealthRatingBar","rating","showText","Rating","icon","maxRating","PatientListPage","isLoading","React","useState","setModalOpen","setError","closeModal","undefined","submitNewPatient","a","axios","post","newPatient","console","response","Loader","active","inline","Container","textAlign","Table","celled","Row","HeaderCell","Body","Object","Cell","to","id","filteredDiagnosisName","filter","Hospital","entry","date","Icon","description","diagnosisCodes","length","paddingTop","keys","discharge","criteria","HealthCheck","healthCheckRating","Healthy","LowRisk","HighRisk","healthCheckRatingIcon","OccupationalHealthcare","sickLeave","startDate","endDate","EntryDetails","OccupationalHealth","entryTypeOptions","isString","String","AddEntryForm","specialist","employerName","num","formatError","Number","paddingBottom","AddEntryModal","PatientPage","useParams","useEffect","get","patientInfoFromApi","fetchPatient","submitNewEntry","newEntry","genderIcon","entries","Entry","App","setIsLoading","patientListFromApi","fetchPatientList","diagnosesListFromApi","fetchDiagnosesList","Link","primary","Divider","hidden","path","ReactDOM","render","action","reduce","memo","document","getElementById"],"mappings":"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","file":"static/js/main.1ad28ad6.chunk.js","sourcesContent":["export interface Diagnosis {\n  code: string;\n  name: string;\n  latin?: string;\n}\n\nexport enum Gender {\n  Male = 'male',\n  Female = 'female',\n  Other = 'other'\n}\n\nexport enum EntryType {\n  Hospital = 'Hospital',\n  OccupationalHealthcare = 'OccupationalHealthcare',\n  HealthCheck = 'HealthCheck'\n}\n\nexport interface Patient {\n  id: string;\n  name: string;\n  occupation: string;\n  gender: Gender;\n  ssn?: string;\n  dateOfBirth?: string;\n  entries: Entry[];\n}\n\nexport interface BaseEntry {\n  id: string;\n  description: string;\n  date: string;\n  specialist: string;\n  diagnosisCodes?: Array<Diagnosis['code']>;\n}\n\nexport enum HealthCheckRating {\n  'Healthy' = 0,\n  'LowRisk' = 1,\n  'HighRisk' = 2,\n  'CriticalRisk' = 3\n}\n\nexport interface HealthCheckEntry extends BaseEntry {\n  type: 'HealthCheck';\n  healthCheckRating: HealthCheckRating;\n}\n\ninterface SickLeave {\n  startDate: string;\n  endDate: string;\n}\n\nexport interface OccupationalHealthCareEntry extends BaseEntry {\n  type: 'OccupationalHealthcare';\n  sickLeave?: SickLeave;\n  employerName?: string;\n}\n\ninterface Discharge {\n  date: string;\n  criteria: string;\n}\n\nexport interface HospitalEntry extends BaseEntry {\n  type: 'Hospital'\n  discharge: Discharge\n}\n\nexport type Entry = \n  | HealthCheckEntry\n  | OccupationalHealthCareEntry\n  | HospitalEntry;\n\nexport type NewVisitEntry = \n  | Omit<OccupationalHealthCareEntry, 'id'>\n  | Omit<HealthCheckEntry, 'id'>\n  | Omit<HospitalEntry, 'id'>;\n\n  // export type NewVisitEntry = Omit<Entry, 'id'>;","// export const apiBaseUrl = 'http://localhost:3001/api';\nexport const apiBaseUrl = 'https://guarded-forest-14729.herokuapp.com/api';\n","import { State } from './state';\nimport { Diagnosis, Patient } from '../types';\n\nexport type Action =\n  | {\n      type: 'SET_PATIENT_LIST';\n      payload: Patient[];\n    }\n  | {\n      type: 'ADD_PATIENT';\n      payload: Patient;\n    }\n  | {\n      type: 'SET_PATIENT';\n      payload: Patient;\n    }\n  | {\n      type: 'SET_DIAGNOSES_LIST';\n      payload: Diagnosis[];\n    };\n\nexport const setDiagnoses = (diagnoses: Diagnosis[]): Action => {\n  return {\n    type: 'SET_DIAGNOSES_LIST',\n    payload: diagnoses\n  };\n};\n\nexport const setPatients = (patients: Patient[]): Action => {\n  return {\n    type: 'SET_PATIENT_LIST',\n    payload: patients\n  };\n};\n\nexport const setPatient = (patient: Patient): Action => {\n  return {\n    type: 'SET_PATIENT',\n    payload: patient\n  };\n};\n    \nexport const addPatient = (patient: Patient): Action => {\n  return {\n    type: 'ADD_PATIENT',\n    payload: patient\n  };\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'SET_PATIENT_LIST':\n      return {\n        ...state,\n        patients: {\n          ...action.payload.reduce(\n            (memo, patient) => ({ ...memo, [patient.id]: patient }),\n            {}\n          ),\n          ...state.patients\n        }\n      };\n    case 'ADD_PATIENT':\n      return {\n        ...state,\n        patients: {\n          ...state.patients,\n          [action.payload.id]: action.payload\n        }\n      };\n    case 'SET_PATIENT': {\n      return {\n        ...state,\n        patient: action.payload\n      };\n    }\n    case 'SET_DIAGNOSES_LIST': {\n      return {\n        ...state,\n        diagnoses: {\n          ...action.payload.reduce(\n            (entry, diagnosis) => ({ ...entry, [diagnosis.code]: diagnosis }),\n            {}\n          ),\n          ...state.diagnoses\n        }\n      };\n    }\n    default:\n      return state;\n  }\n};\n","import React, { createContext, useContext, useReducer } from 'react';\nimport { Diagnosis, Patient } from '../types';\n\nimport { Action } from './reducer';\n\nexport type State = {\n  patients: { [id: string]: Patient };\n  patient: Patient | null;\n  diagnoses: Diagnosis[];\n};\n\nconst initialState: State = {\n  patients: {},\n  patient: null,\n  diagnoses: []\n};\n\nexport const StateContext = createContext<[State, React.Dispatch<Action>]>([\n  initialState,\n  () => initialState\n]);\n\ntype StateProviderProps = {\n  reducer: React.Reducer<State, Action>;\n  children: React.ReactElement;\n};\n\nexport const StateProvider: React.FC<StateProviderProps> = ({\n  reducer,\n  children\n}: StateProviderProps) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <StateContext.Provider value={[state, dispatch]}>\n      {children}\n    </StateContext.Provider>\n  );\n};\nexport const useStateValue = () => useContext(StateContext);\n","import React from 'react';\nimport { ErrorMessage, Field, FieldProps, FormikProps } from 'formik';\nimport { Dropdown, DropdownProps, Form } from 'semantic-ui-react';\nimport { Diagnosis, Gender, EntryType } from '../types';\n\n// structure of a single option\nexport type GenderOption = {\n  value: Gender;\n  label: string;\n};\n\nexport type EntryTypeOption = {\n  value: EntryType;\n  label: string;\n};\n\n// props for select field component\ntype SelectFieldProps = {\n  name: string;\n  label: string;\n  options: (GenderOption | EntryTypeOption)[];\n};\n\nexport const SelectField = ({\n  name,\n  label,\n  options\n}: SelectFieldProps) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field as=\"select\" name={name} className=\"ui dropdown\">\n      {options.map(option => (\n        <option key={option.value} value={option.value}>\n          {option.label || option.value}\n        </option>\n      ))}\n    </Field>\n  </Form.Field>\n);\n\ninterface TextProps extends FieldProps {\n  label: string;\n  placeholder: string;\n}\n\nexport const TextField= ({\n  field,\n  label,\n  placeholder\n}: TextProps) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field placeholder={placeholder} {...field} />\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\n/*\n  for exercises 9.24.-\n*/\ninterface NumberProps extends FieldProps {\n  label: string;\n  errorMessage?: string;\n  min: number;\n  max: number;\n}\n\nexport const NumberField = ({ field, label, min, max } : NumberProps ) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field {...field} type=\"number\" min={min} max={max} />\n\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\nexport const DiagnosisSelection = ({\n  diagnoses,\n  setFieldValue,\n  setFieldTouched\n}: {\n  diagnoses: Diagnosis[];\n  setFieldValue: FormikProps<{ diagnosisCodes: string[] }>['setFieldValue'];\n  setFieldTouched: FormikProps<{ diagnosisCodes: string[] }>['setFieldTouched'];\n}) => {\n  const field = 'diagnosisCodes';\n  const onChange = (\n    _event: React.SyntheticEvent<HTMLElement, Event>,\n    data: DropdownProps\n  ) => {\n    setFieldTouched(field, true);\n    setFieldValue(field, data.value);\n  };\n\n  const stateOptions = diagnoses.map(diagnosis => ({\n    key: diagnosis.code,\n    text: `${diagnosis.name} (${diagnosis.code})`,\n    value: diagnosis.code\n  }));\n\n  return (\n    <Form.Field>\n      <label>Diagnoses</label>\n      <Dropdown\n        fluid\n        multiple\n        search\n        selection\n        options={stateOptions}\n        onChange={onChange}\n      />\n      <ErrorMessage name={field} />\n    </Form.Field>\n  );\n};\n","import React from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { Field, Formik, Form } from 'formik';\n\nimport { TextField, SelectField, GenderOption } from '../components/FormField';\nimport { Gender, Patient } from '../types';\n\n/*\n * use type Patient, but omit id and entries,\n * because those are irrelevant for new patient object.\n */\nexport type PatientFormValues = Omit<Patient, 'id' | 'entries'>;\n\ninterface Props {\n  onSubmit: (values: PatientFormValues) => void;\n  onCancel: () => void;\n}\n\nconst genderOptions: GenderOption[] = [\n  { value: Gender.Male, label: 'Male' },\n  { value: Gender.Female, label: 'Female' },\n  { value: Gender.Other, label: 'Other' }\n];\n\nexport const AddPatientForm = ({ onSubmit, onCancel } : Props ) => {\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        ssn: '',\n        dateOfBirth: '',\n        occupation: '',\n        gender: Gender.Other\n      }}\n      onSubmit={onSubmit}\n      validate={values => {\n        const requiredError = 'Field is required';\n        const errors: { [field: string]: string } = {};\n        if (!values.name) {\n          errors.name = requiredError;\n        }\n        if (!values.ssn) {\n          errors.ssn = requiredError;\n        }\n        if (!values.dateOfBirth) {\n          errors.dateOfBirth = requiredError;\n        }\n        if (!values.occupation) {\n          errors.occupation = requiredError;\n        }\n        return errors;\n      }}\n    >\n      {({ isValid, dirty }) => {\n        return (\n          <Form className=\"form ui\">\n            <Field\n              label=\"Name\"\n              placeholder=\"Name\"\n              name=\"name\"\n              component={TextField}\n            />\n            <Field\n              label=\"Social Security Number\"\n              placeholder=\"SSN\"\n              name=\"ssn\"\n              component={TextField}\n            />\n            <Field\n              label=\"Date Of Birth\"\n              placeholder=\"YYYY-MM-DD\"\n              name=\"dateOfBirth\"\n              component={TextField}\n            />\n            <Field\n              label=\"Occupation\"\n              placeholder=\"Occupation\"\n              name=\"occupation\"\n              component={TextField}\n            />\n            <SelectField\n              label=\"Gender\"\n              name=\"gender\"\n              options={genderOptions}\n            />\n            <Grid>\n              <Grid.Column floated=\"left\" width={5}>\n                <Button type=\"button\" onClick={onCancel} color=\"red\">\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated=\"right\" width={5}>\n                <Button\n                  type=\"submit\"\n                  floated=\"right\"\n                  color=\"green\"\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddPatientForm;\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport AddPatientForm, { PatientFormValues } from './AddPatientForm';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: PatientFormValues) => void;\n  error?: string;\n}\n\nconst AddPatientModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new patient</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\n      <AddPatientForm onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default AddPatientModal;\n","import React from 'react';\nimport { Rating } from 'semantic-ui-react';\n\ntype BarProps = {\n  rating: number;\n  showText: boolean;\n};\n\nconst HEALTHBAR_TEXTS = [\n  'The patient is in great shape',\n  'The patient has a low risk of getting sick',\n  'The patient has a high risk of getting sick',\n  'The patient has a diagnosed condition',\n];\n\nconst HealthRatingBar = ({ rating, showText }: BarProps) => {\n  return (\n    <div className=\"health-bar\">\n      {<Rating icon=\"heart\" disabled rating={4 - rating} maxRating={4} />}\n      {showText ? <p>{HEALTHBAR_TEXTS[rating]}</p> : null}\n    </div>\n  );\n};\n\nexport default HealthRatingBar;\n","import React from 'react';\nimport axios from 'axios';\nimport { Container, Table, Button, Loader } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nimport { PatientFormValues } from '../AddPatientModal/AddPatientForm';\nimport AddPatientModal from '../AddPatientModal';\nimport { Patient } from '../types';\nimport { apiBaseUrl } from '../constants';\nimport HealthRatingBar from '../components/HealthRatingBar';\nimport { useStateValue, addPatient } from '../state';\n\ninterface Props {\n  isLoading: boolean;\n}\n\nconst PatientListPage = ({ isLoading }: Props) => {\n  const [{ patients }, dispatch] = useStateValue();\n\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\n  const [error, setError] = React.useState<string | undefined>();\n\n  const openModal = (): void => setModalOpen(true);\n\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n\n  const submitNewPatient = async (values: PatientFormValues) => {\n    try {\n      const { data: newPatient } = await axios.post<Patient>(\n        `${apiBaseUrl}/patients`,\n        values\n      );\n      dispatch(addPatient(newPatient));\n      closeModal();\n    } catch (e) {\n      console.error(e.response?.data || 'Unknown Error');\n      setError(e.response?.data?.error || 'Unknown error');\n    }\n  };\n\n  if(isLoading) {\n    return (\n      <Loader active inline=\"centered\" />\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <Container textAlign=\"center\">\n        <h3>Patient list</h3>\n      </Container>\n      <Table celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Name</Table.HeaderCell>\n            <Table.HeaderCell>Gender</Table.HeaderCell>\n            <Table.HeaderCell>Occupation</Table.HeaderCell>\n            <Table.HeaderCell>Health Rating</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {Object.values(patients).map((patient: Patient) => (\n            <Table.Row key={patient.id}>\n              <Table.Cell>\n                <Link to={`/patients/${patient.id}`}>{patient.name}</Link>\n              </Table.Cell>\n              <Table.Cell>{patient.gender}</Table.Cell>\n              <Table.Cell>{patient.occupation}</Table.Cell>\n              <Table.Cell>\n                <HealthRatingBar showText={false} rating={1} />\n              </Table.Cell>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n      <AddPatientModal\n        modalOpen={modalOpen}\n        onSubmit={submitNewPatient}\n        error={error}\n        onClose={closeModal}\n      />\n      <Button onClick={() => openModal()}>Add New Patient</Button>\n    </div>\n  );\n};\n\nexport default PatientListPage;\n","import { Diagnosis } from '../types';\n\nexport const filteredDiagnosisName = (code: string, diagnoses: Diagnosis[]): string => {\n  return Object.values(diagnoses).filter((diagnosis: Diagnosis) => diagnosis.code === code )[0].name + ' ';\n};\n","import React from 'react';\nimport { Diagnosis, HospitalEntry } from '../types';\nimport { Icon } from 'semantic-ui-react';\n\nimport { filteredDiagnosisName } from './helper';\n\ninterface Props {\n  entry: HospitalEntry;\n  diagnoses: Diagnosis[]\n}\n\nconst Hospital = ({ entry, diagnoses }: Props) => {\n  return (\n    <div key={entry.id} className=\"ui segment\">\n      <h2>{entry.date} <Icon name=\"hospital\" /></h2>\n      <em style={{ color: 'grey' }}>{entry.description}</em>\n\n      {(entry.diagnosisCodes && entry.diagnosisCodes.length > 0)  &&\n        <div style={{ paddingTop: '10px' }}>\n          <strong>Diagnoses:</strong>\n          <div className=\"ui bulleted list\">\n            {Object.keys(diagnoses).length > 0 && entry.diagnosisCodes.map(code =>\n              <div key={code} className=\"item\">\n                {filteredDiagnosisName(code, diagnoses)}\n              </div>\n            )}\n          </div>\n        </div>\n      }\n\n      <div style={{ paddingTop: '10px' }}>\n        <div>\n          <strong>Discharge Date:</strong>\n          <span> {entry.discharge.date}</span>\n        </div>\n        <div>\n          <strong>Discharge Criteria:</strong>\n          <span> {entry.discharge.criteria}</span>\n        </div>\n        </div>\n      </div>\n     \n  );\n};\n\nexport default Hospital;","import React from 'react';\nimport { HealthCheckEntry } from '../types';\nimport { Icon, SemanticCOLORS } from 'semantic-ui-react';\nimport { HealthCheckRating } from '../types';\n\nconst HealthCheck = ({ entry }: { entry: HealthCheckEntry }) => {\n  const healthCheckRatingIcon = (): SemanticCOLORS => {\n    switch(entry.healthCheckRating) {\n      case HealthCheckRating.Healthy:\n        return 'green';\n      case HealthCheckRating.LowRisk:\n        return 'yellow';\n      case HealthCheckRating.HighRisk:\n        return 'orange';\n      default:\n        return 'red';      \n    }\n  };\n  \n  return (\n    <div key={entry.id} className=\"ui segment\">\n      <h2>{entry.date} <Icon name=\"stethoscope\" /></h2>\n      <em style={{ color: 'grey' }}>{entry.description}</em>\n      <p style={{ paddingTop: '5px' }}>\n        <Icon name=\"heart\" color={healthCheckRatingIcon()} />\n      </p>\n    </div>\n  );\n};\n\nexport default HealthCheck;","import React from 'react';\nimport { Diagnosis, OccupationalHealthCareEntry } from '../types';\nimport { Icon } from 'semantic-ui-react';\n\nimport { filteredDiagnosisName } from './helper';\n\ninterface Props {\n  entry: OccupationalHealthCareEntry;\n  diagnoses: Diagnosis[];\n}\n\nconst OccupationalHealthcare = ({ entry, diagnoses }: Props) => {\n  return (\n    <div key={entry.id} className=\"ui segment\">\n      <h2>{entry.date} <Icon name=\"building\" /></h2>\n      <em style={{ color: 'grey' }}>{entry.description}</em>\n\n      {(entry.diagnosisCodes && entry.diagnosisCodes.length > 0)  &&\n        <div style={{ paddingTop: '10px' }}>\n          <strong>Diagnoses:</strong>\n          <div className=\"ui bulleted list\">\n            {Object.keys(diagnoses).length > 0 && entry.diagnosisCodes.map(code =>\n              <div key={code} className=\"item\">\n                {filteredDiagnosisName(code, diagnoses)}\n              </div>\n            )}\n          </div>\n        </div>\n      }\n    \n      {entry.sickLeave?.startDate  &&\n        <div style={{ paddingTop: '10px' }}>\n          <strong>\n            Sick leave:\n          </strong>\n          <span> {entry.sickLeave?.startDate} to {entry.sickLeave.endDate}</span>\n        </div>\n      }\n    </div>\n  );\n};\n\nexport default OccupationalHealthcare;","import React from 'react';\nimport { Entry } from '../types';\nimport { useStateValue } from '../state';\n\nimport Hospital from './Hospital';\nimport HealthCheck from './HealthCheck';\nimport OccupationalHealthcare from './OccupationalHealth';\n\nconst EntryDetails = ({ entry }: { entry: Entry }) => {\n  const [{ diagnoses }] = useStateValue();\n\n  switch(entry.type) {\n    case 'Hospital':\n      return <Hospital entry={entry} diagnoses={diagnoses} />;\n    case 'OccupationalHealthcare':\n      return <OccupationalHealthcare entry={entry} diagnoses={diagnoses} />;\n    case 'HealthCheck':\n      return <HealthCheck entry={entry} />;\n    default:\n      return null;\n  }\n};\n\nexport default EntryDetails;","import React from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { Field, Formik, Form } from 'formik';\n\nimport { TextField, EntryTypeOption, SelectField, DiagnosisSelection, NumberField } from '../components/FormField';\nimport { EntryType, NewVisitEntry } from '../types';\nimport { useStateValue } from '../state';\n\nexport type EntryFormValues = Omit<NewVisitEntry, 'type'>;\n\ninterface Props {\n  onSubmit: (values: EntryFormValues) => void;\n  onCancel: () => void;\n}\n\nconst entryTypeOptions: EntryTypeOption[] = [\n  { value: EntryType.Hospital, label: 'Hospital' },\n  { value: EntryType.HealthCheck, label: 'Health Check' },\n  { value: EntryType.OccupationalHealthcare, label: 'Occupational Healthcare' },\n];\n\nconst isString = (text: unknown): text is string => {\n  return typeof text === 'string' || text instanceof String;\n};\n\nconst isNumber = (num: unknown): num is number => {\n  return typeof Number(num) === 'number';\n};\n\nexport const AddEntryForm = ({ onSubmit, onCancel } : Props ) => {\n  const [{ diagnoses }] = useStateValue();\n\n  return (\n    <Formik\n      initialValues={{\n        description: '',\n        date: '',\n        specialist: '',\n        diagnosisCodes: [],\n        discharge: { date: '', criteria: '' },\n        sickLeave: { startDate: '', endDate: '' },\n        employerName: '',\n        healthCheckRating: 0, \n        type: EntryType.Hospital\n      }}\n      onSubmit={onSubmit}\n      validate={values => {\n        const requiredError = 'Field is required';\n        const formatError = 'Formatted incorrectly';\n        const errors: { [field: string]: string } = {};\n        if(!values.description) {\n          errors.description = requiredError;\n        }\n        if(!values.date) {\n          errors.date = requiredError;\n        }\n        if(!values.specialist) {\n          errors.specialist = requiredError;\n        }\n        if(typeof values.description !== 'string') {\n          errors.description = formatError;\n        }\n        if(typeof values.date !== 'string') {\n          errors.date = formatError;\n        }\n        if(typeof values.specialist !== 'string') {\n          errors.specialist = formatError;\n        }\n        if(values.type === EntryType.Hospital && (!values.discharge.date || !values.discharge.criteria)) {\n          errors.discharge = requiredError;\n        }\n        if(values.type === EntryType.OccupationalHealthcare && (!isString(values.sickLeave.startDate) || !isString(values.sickLeave.endDate))) {\n          errors.sickLeave = formatError;\n        }\n        if(values.type === EntryType.OccupationalHealthcare && !isString(values.employerName)) {\n          errors.sickLeave = formatError;\n        }\n        if(values.type === EntryType.HealthCheck && values.healthCheckRating === null) {\n          errors.healthCheckRating = requiredError;\n        }\n        if(values.type === EntryType.HealthCheck && !isNumber(values.healthCheckRating)) {\n          errors.healthCheckRating = formatError;\n        }\n        return errors;\n      }}\n    >\n      {({ isValid, dirty, setFieldValue, setFieldTouched, values }) => {\n        return (\n          <Form className=\"form ui\">\n            <SelectField\n              label=\"Entry Type\"\n              name=\"type\"\n              options={entryTypeOptions}\n            />\n            <Field\n              label=\"Date\"\n              placeholder=\"YYYY-MM-DD\"\n              name=\"date\"\n              component={TextField}\n            />\n            <Field\n              label=\"Specialist\"\n              placeholder=\"Specialist\"\n              name=\"specialist\"\n              component={TextField}\n            />\n            <Field\n              label=\"Description\"\n              placeholder=\"Description\"\n              name=\"description\"\n              component={TextField}\n            />\n            <DiagnosisSelection\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              diagnoses={Object.values(diagnoses)}\n            />         \n            {values.type === EntryType.Hospital &&\n              <div style={{ paddingBottom: '10px' }}>\n                <Field\n                  label=\"Discharge Date\"\n                  placeholder=\"YYYY-MM-DD\"\n                  name=\"discharge.date\"\n                  component={TextField}\n                />\n                <Field\n                  label=\"Discharge Criteria\"\n                  placeholder=\"Criteria\"\n                  name=\"discharge.criteria\"\n                  component={TextField}\n                />\n              </div>\n            }\n            {values.type === EntryType.OccupationalHealthcare &&\n              <div style={{ paddingBottom: '10px' }}>\n                <Field\n                  label=\"Sick Leave Start Date\"\n                  placeholder=\"YYYY-MM-DD\"\n                  name=\"sickLeave.startDate\"\n                  component={TextField}\n                />\n                <Field\n                  label=\"Sick Leave End Date\"\n                  placeholder=\"YYYY-MM-DD\"\n                  name=\"sickLeave.endDate\"\n                  component={TextField}\n                />\n                <Field\n                  label=\"Employer Name\"\n                  placeholder=\"Employer\"\n                  name=\"employerName\"\n                  component={TextField}\n                />\n              </div>\n            }\n            {values.type === EntryType.HealthCheck &&\n              <Field\n                label=\"Health Check Rating\"\n                name=\"healthCheckRating\"\n                component={NumberField}\n                min={0}\n                max={3}\n              />\n            }\n            <Grid>\n              <Grid.Column floated=\"left\" width={5}>\n                <Button type=\"button\" onClick={onCancel} color=\"red\">\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated=\"right\" width={5}>\n                <Button\n                  type=\"submit\"\n                  floated=\"right\"\n                  color=\"green\"\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddEntryForm;\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport AddEntryForm, { EntryFormValues } from './AddEntryForm';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: EntryFormValues) => void;\n  error?: string;\n}\n\nconst AddEntryModal = ({ modalOpen, onClose, onSubmit, error}: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new Entry</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\n      <AddEntryForm onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default AddEntryModal;\n","import axios from 'axios';\nimport React from 'react';\nimport { apiBaseUrl } from '../constants';\nimport { Patient } from '../types';\nimport { useStateValue, setPatient } from '../state';\nimport { useParams } from 'react-router';\nimport { Icon, SemanticICONS, Button } from 'semantic-ui-react';\nimport EntryDetails from './Entry';\nimport AddEntryModal from '../AddEntryModal';\nimport { EntryFormValues } from '../AddEntryModal/AddEntryForm';\n\nconst PatientPage = () => {\n  const [{ patient }, dispatch] = useStateValue();\n\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\n\n  const openModal = (): void => setModalOpen(true);\n\n  const closeModal = (): void => {\n    setModalOpen(false);\n  };\n\n  const { id } = useParams<{ id: string }>();\n\n  React.useEffect(() => {\n    const fetchPatient = async () => {\n      try {\n        const { data: patientInfoFromApi } = await axios.get<Patient>(\n          `${apiBaseUrl}/patients/${id}`\n        );\n        dispatch(setPatient(patientInfoFromApi));\n      } catch(e) {\n        console.error(e);\n      }\n    };\n    void fetchPatient();\n  }, [dispatch]);\n\n  const genderIcon = (): SemanticICONS => {\n    switch (patient?.gender) {\n      case 'male':\n        return 'mars';\n      case 'female':\n        return 'venus';\n      default:\n        return 'genderless';\n    }\n  };\n\n  const submitNewEntry = async (values: EntryFormValues) => {\n    try {\n      const { data: newEntry } = await axios.post<Patient>(\n        `${apiBaseUrl}/patients/${id}/entries`,\n        values\n      );\n      dispatch(setPatient(newEntry));\n      closeModal();\n    } catch(e) {\n      console.error(e.response?.data || 'Unknown Error');\n    }\n  };\n\n  if(!patient) return null;\n  \n  return (\n    <div className=\"Patient-Details\">\n      <h2>{patient.name} <Icon name={genderIcon()} /></h2>\n      <p>ssn: {patient.ssn}</p>\n      <p>occupation: {patient?.occupation}</p>\n      <Button onClick={() => openModal()}>Add New Entry</Button>\n      {patient.entries.length > 0 &&\n        <div style={{ paddingTop: '10px' }}>\n          <h3>entries</h3>\n          {patient.entries.map(entry =>\n            <EntryDetails key={entry.id} entry={entry} />\n          )}\n        </div>\n      }\n      <AddEntryModal \n        modalOpen={modalOpen}\n        onSubmit={submitNewEntry}\n        onClose={closeModal} \n      />\n    </div>\n  );\n};\n\nexport default PatientPage;\n","import React from 'react';\nimport axios from 'axios';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\nimport { Button, Divider, Header, Container } from 'semantic-ui-react';\n\nimport { apiBaseUrl } from './constants';\nimport { setDiagnoses, setPatients, useStateValue } from './state';\nimport { Diagnosis, Patient } from './types';\n\nimport PatientListPage from './PatientListPage';\nimport PatientPage from './PatientPage';\n\nconst App = () => {\n  const [, dispatch] = useStateValue();\n  const [isLoading, setIsLoading] = React.useState<boolean>(false);\n  \n  React.useEffect(() => {\n    void axios.get<void>(`${apiBaseUrl}/ping`);\n\n    const fetchPatientList = async () => {\n      setIsLoading(true);\n      try {\n        const { data: patientListFromApi } = await axios.get<Patient[]>(\n          `${apiBaseUrl}/patients`\n        );\n        dispatch(setPatients(patientListFromApi));\n        setIsLoading(false);\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    void fetchPatientList();\n  }, [dispatch]);\n\n  React.useEffect(() => {\n    const fetchDiagnosesList = async () => {\n      try {\n        const { data: diagnosesListFromApi } = await axios.get<Diagnosis[]>(\n          `${apiBaseUrl}/diagnoses`\n        );\n        dispatch(setDiagnoses(diagnosesListFromApi));\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    void fetchDiagnosesList();\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Container>\n          <Header as=\"h1\">Patientor</Header>\n          <Button as={Link} to=\"/\" primary>\n            Home\n          </Button>\n          <Divider hidden />\n          <Switch>\n            <Route path=\"/patients/:id\">\n              <PatientPage />\n            </Route>\n            <Route path=\"/\">\n              <PatientListPage isLoading={isLoading} />\n            </Route>\n          </Switch>\n        </Container>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport { reducer, StateProvider } from './state';\n\nReactDOM.render(\n  <StateProvider reducer={reducer}>\n    <App />\n  </StateProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}